<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Home on kerimkaan’s website</title><link>https://kerimkaan.github.io/</link><description>Recent content in Home on kerimkaan’s website</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Everything is mine</copyright><lastBuildDate>Thu, 03 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://kerimkaan.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Part One: Design Principles</title><link>https://kerimkaan.github.io/journal/1/</link><pubDate>Thu, 03 Dec 2020 00:00:00 +0000</pubDate><guid>https://kerimkaan.github.io/journal/1/</guid><description>Last time, we made a parser for simple unnested mathematical expressions, such as 1+1 or 3*4. In this post, we’ll add support for whitespace (so that users of Eldiro will be able to use 2 + 2 instead of 2+2).
We can achieve this by creating an extract_whitespace function similar to extract_digits:
// utils.rs // Let’s copy-paste from extract_digits pub(crate)fn extract_whitespace(s: &amp;amp;str)-&amp;gt; (&amp;amp;str,&amp;amp;str){letwhitespace_end=s.char_indices().find_map(|(idx,c)|ifc==&amp;#39; &amp;#39;{None}else{Some(idx)}).unwrap_or_else(||s.len());letwhitespace=&amp;amp;s[..whitespace_end];letremainder=&amp;amp;s[whitespace_end..];(remainder,whitespace)}#[cfg(test)]mod tests{// snip #[test]fn extract_spaces(){assert_eq!(extract_whitespace(&amp;#34; 1&amp;#34;),(&amp;#34;1&amp;#34;,&amp;#34; &amp;#34;));}}Although this does indeed work, it involves quite a bit of repetition.</description></item><item><title>Part Zero: What and Why?</title><link>https://kerimkaan.github.io/journal/0/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://kerimkaan.github.io/journal/0/</guid><description>We use POS systems every day. When you buy eggs from the grocery store, you take out your credit card and hand it over to Uncle Haydar. Your credit card is read on the device and payment is made - sometimes contactless, sometimes by entering your password. Imagine how many customers like you make their payments from different places at the same time every day through POS systems. Banking applications running in the background should be able to handle too many transactions happening at the same time, as well as high security and high stability.</description></item></channel></rss>